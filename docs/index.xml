<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alex Owens</title>
    <link>https://aowens.me/</link>
    <description>Recent content on Alex Owens</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 03 Mar 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://aowens.me/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Deep Learning Concepts Pt. 2: A Basic Neural Network</title>
      <link>https://aowens.me/post/simple-neural-network/</link>
      <pubDate>Sat, 03 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://aowens.me/post/simple-neural-network/</guid>
      <description>Network Steepest Descent in Python Code is available here.
Welcome to part two of my series on Deep Learning concepts, if you haven&amp;rsquo;t read through part one then I&amp;rsquo;d suggest doing that. This will be a much shorter post that builds on all of the ideas I covered there.
What makes a network? In the last post we talked about how artificial neurons are represented. While a neuron is just a single learning entity, a network is a collection of layers of neurons.</description>
    </item>
    
    <item>
      <title>Deep Learning Concepts Pt. 1: One Neuron Steepest Descent</title>
      <link>https://aowens.me/post/one-neuron-steepest-descent/</link>
      <pubDate>Wed, 21 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://aowens.me/post/one-neuron-steepest-descent/</guid>
      <description>One Neuron Steepest Descent in Python Code is available here.
This is going to be a two part series on some very basic introductory concepts of (deep learning)[https://en.wikipedia.org/wiki/Deep_learning], using Python to make a program that learns the boolean functions AND and OR. We will be using a specific case of the steepest descent(also known as gradient descent) to &amp;ldquo;learn the functions&amp;rdquo;, using backpropagation on one layer to compute the weight gradients for our gradient descent.</description>
    </item>
    
    <item>
      <title>Making a Crappy Django App</title>
      <link>https://aowens.me/post/made-a-bad-django-app/</link>
      <pubDate>Sun, 11 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://aowens.me/post/made-a-bad-django-app/</guid>
      <description>A Due Date App in Django Code is available here.
I&amp;rsquo;m sorry this blog post is late, which means there&amp;rsquo;s another one coming tomorrow night. This week I focused on learning a bit more about Django by making an app that was sort of like the tutorial app I made last week. I decided to do something that at least has the potential to be useful: a date-sorted to-do list.</description>
    </item>
    
    <item>
      <title>Doing the Django Tutorial</title>
      <link>https://aowens.me/post/doing-the-django-tutorial/</link>
      <pubDate>Mon, 29 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://aowens.me/post/doing-the-django-tutorial/</guid>
      <description>Doing the Django Tutorial Code is available here.
This is going to be a pretty simple and short blog post, as I didn&amp;rsquo;t get to do much in the way of interesting new things this week. However, I did check out the Django Framework for Python, and I really enjoyed making a small web application in that. I followed the Official Tutorial and I think that&amp;rsquo;s a great intro to the framework in general.</description>
    </item>
    
    <item>
      <title>Sorts With Python</title>
      <link>https://aowens.me/post/sorts-with-python/</link>
      <pubDate>Sun, 21 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://aowens.me/post/sorts-with-python/</guid>
      <description>Sorts With Python Code available here.
This week I didn&amp;rsquo;t have a whole lot of spare time to program, so I did something pretty standard for this blog: sorting. I decided to implement 3 popular sorts (and maybe more to come) in Python: Bubble Sort, Insertion Sort, and Merge Sort. I&amp;rsquo;ve seen and implemented these sorts before, but I thought it would be a decent exercise to do them in Python since that&amp;rsquo;s the language I&amp;rsquo;ve been most interested in recently.</description>
    </item>
    
    <item>
      <title>A Simple Level Editor</title>
      <link>https://aowens.me/post/a-simple-level-editor/</link>
      <pubDate>Mon, 15 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://aowens.me/post/a-simple-level-editor/</guid>
      <description>Level Editor Code available here.
This is the second week of 2018 and it&amp;rsquo;s the second week I decided to do some programming and blogging. This week I wanted to write something in Python because I like the language a lot and I&amp;rsquo;m going to be using it for a class this semester. I decided to make a very small grid-based level editor using the 2D game framework pygame. This level editor is super simple, and it needs a lot of work before I&amp;rsquo;d use it for an actual game, but it was a good learning experience in both python and pygame.</description>
    </item>
    
    <item>
      <title>Hello Hugo!</title>
      <link>https://aowens.me/post/hello-hugo/</link>
      <pubDate>Mon, 08 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://aowens.me/post/hello-hugo/</guid>
      <description>Starting a Blog It&amp;rsquo;s New Year&amp;rsquo;s Resolution time, which is as good a time as any to start my programming blog. I&amp;rsquo;ll start off by introducing myself. My name is Alex Owens, and I&amp;rsquo;m a Computer Science student at Northern Kentucky University. I&amp;rsquo;m in my third year of school, and I&amp;rsquo;m starting this blog as a really informal way to document my development as a programmer. The format for this site will be pretty simple: weekly blog posts about whatever I&amp;rsquo;m working on that week.</description>
    </item>
    
  </channel>
</rss>